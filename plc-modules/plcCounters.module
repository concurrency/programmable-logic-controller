--      Copyright (C) 2011   Stephen Pretty
--
--	This library is free software; you can redistribute it and/or
--	modify it under the terms of the GNU Lesser General Public
--	License as published by the Free Software Foundation; either
--	version 2 of the License, or (at your option) any later version.
--
--	This library is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--	Lesser General Public License for more details.
--
--      You should have received a copy of the GNU General Public License
--      along with this program.  If not, see <http://www.gnu.org/licenses/>.

#IF NOT (DEFINED (PLCCOUNTERS.MODULE))
#DEFINE PLCCOUNTERS.MODULE
-- module: plcCounters
-- by: Steve Pretty 
-- on: 23FEB11

-- "plc" aims to implement programmable logic controller blocks similar
-- in functionality to those described in IEC 61131. Functionality
-- is often simplified (e.g. reset and enable functions not implemented at
-- present). More complex versions of the functional blocks may be developed in  future?
-- NOTE - all digital functionality standardizes on use of the plumbing
-- defined LEVEL type. Receipt of HIGH signifies a logical rising edge
-- LOW signifies a logical falling edge. The plumbing message SIGNAL is not used as
-- part of the API (but is used internally).

-- COUNTER FUNCTIONAL BLOCKS

--{{{ PROC plc.CYCNT
--* Implements a simple cyclic count up counter.
--
-- @param max - counts in cycle (should be in the range 1 - 32767)
-- @param edge - HIGH indicates increment counter on rising edge, LOW on falling edge.
-- @param inc - a transition on this channel of type defined by edge increments counter
-- @param atmax - a HIGH is sent on this chan when the counter reaches max. A LOW is sent when counter = 0
-- @param count - the counter sends its current value on this CHAN

PROC plc.CYCNT (VAL INT max, VAL LEVEL edge, CHAN LEVEL inc?, atmax!, CHAN INT cout!)
  INITIAL INT count IS 0:
  INITIAL BOOL first IS TRUE:
  LEVEL x:
  SEQ
    cout ! count
    WHILE TRUE
      SEQ
        inc ? x
        IF
          x = edge
            SEQ
              count := count + 1
              IF
                count = max
                  SEQ
                    count := 0
                    first := FALSE
                TRUE
                  SKIP
              PAR
                cout ! count
                IF
                  count = 0
                    atmax ! HIGH
                  (count = 1) AND (NOT first)
                    atmax ! LOW
                  TRUE
                    SKIP
          TRUE
            SKIP
:
--}}}


--{{{ PROC plc.CTU
--* Implements a simple count up counter block.
--
-- @param max - maximum value of counter (max value 32767)
-- @param edge - HIGH indicates increment counter on rising edge, LOW on falling edge.
-- @param inc - a transition on this channel of type defined by edge increments counter
-- @param reset - a HIGH received on this chan will reset the counter to zero.
-- @param atmax - a HIGH is sent on this chan when the counter reaches max. A LOW is sent when counter = 0
-- @param count - the counter sends its current value on this CHAN

PROC plc.CTU (VAL INT max, VAL LEVEL edge, CHAN LEVEL inc?, reset?, atmax!, CHAN INT cout!)
  INITIAL INT count IS 0:
  LEVEL x,y:
  INITIAL BOOL highout IS FALSE:
  SEQ
    cout ! count
    WHILE TRUE
      ALT
        inc ? x
          IF
            x = edge
              SEQ
                IF
                  count <> max
                    SEQ
                      count := count + 1
                      cout ! count
                      IF
                        (count = max) AND (NOT highout)
                          SEQ
                            atmax ! HIGH
                            highout := TRUE
                        TRUE
                          SKIP
                  TRUE
                    SKIP
            TRUE
              SKIP
          
        reset ? y
          IF
            y = HIGH
              SEQ
                count := 0
                cout ! count
                IF
                  highout
                    SEQ
                      highout := FALSE
                      atmax ! LOW
                  TRUE
                    SKIP
            TRUE
              SKIP
:
--}}}

#ENDIF