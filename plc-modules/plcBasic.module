--      Copyright (C) 2011   Stephen Pretty
--
--	This library is free software; you can redistribute it and/or
--	modify it under the terms of the GNU Lesser General Public
--	License as published by the Free Software Foundation; either
--	version 2 of the License, or (at your option) any later version.
--
--	This library is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--	Lesser General Public License for more details.
--
--      You should have received a copy of the GNU General Public License
--      along with this program.  If not, see <http://www.gnu.org/licenses/>.


#IF NOT (DEFINED (PLCBASIC.MODULE))
#DEFINE PLCBASIC.MODULE
-- module: plcBasic
-- by: Steve Pretty 
-- on: 18FEB11

-- plc aims to implement programmable logic controller blocks similar
-- in functionality to those described in IEC 61131. Functionality
-- is often simplified (e.g. reset and enable functions not implemented at
-- present). More complex versions of the functional blocks may be developed in  future?
-- NOTE - all digital functionality standardizes on use of the plumbing
-- defined LEVEL type. Receipt of HIGH signifies a logical rising edge
-- LOW signifies a logical falling edge. The plumbing message SIGNAL is not used as
-- part of the API (but is used internally).

-- NOTE users must include plumbing.module to use this module.

-- plcBasic.module - BASIC I/O FUNCTIONAL BLOCKS

--{{{ PROC plc.NOT
--* Logical Inversion
-- 
-- @param in - gate input level
-- @param out - inverted output level

PROC plc.NOT (CHAN LEVEL in?, out!)
  LEVEL x:
  SEQ
    out ! HIGH -- establish initial condition
    WHILE TRUE
      SEQ
        in ? x
        out ! NOT x
:
--}}}

--{{{ PROC plc.LD
--* Digital Input (named after IEC 61131 Instruction List LD)
-- Can be used to read state of a Normally Open push button.
-- This block uses external interrupts to service inputs on arduino pins
-- 2 and 3 (identical to plumbing digital.input functionality). This provides
-- low latency. Note that if pins are connected to push buttons, it is advisable
-- to filter the input messages using the plumbing "debounce" PROC.
-- In addition, this block uses timed polling to read from other input pins and thus 
-- the block can be used on any arduino input pin. For pins using timed polling,
-- this block checks the input pin every 50ms, and sends an output only if
-- the input level changes. It therefore automatically provides debounce.
-- 
-- @param board.pin The pin the digital input is connected to.
-- @param out a debounced LEVEL corresponding to input level

PROC plc.LD (VAL INT board.pin, CHAN LEVEL out!)
  INITIAL INT avr.pin IS board.to.chip(board.pin):
  INITIAL INT vintr IS (- 1):
  LEVEL level, old:

  IF
    (board.pin = 2) OR (board.pin = 3)
      SEQ
        #PRAGMA DEFINED vintr
        set.interrups (avr.pin, vintr)
        WHILE TRUE
          SEQ
            INT any:
            wait.for.interrupt (vintr, any)
            digital.read (board.pin, level)
            out ! level
    TRUE
      SEQ
        digital.read (board.pin, level) -- read initial pin value
        out ! level
        old := level
        WHILE TRUE
          SEQ
            delay (50)
            digital.read (board.pin, level)
            IF
              level <> old
                SEQ
                  out ! level
                  old := level
              TRUE
                SKIP
:

--}}}

--{{{ PROC plc.LDN
--* Digital Input Inverted (named after IEC 61131 Instruction List LDN)
-- Watches for level changes on pins, using plc.LD
-- When a change occurs a LEVEL is generated. 
-- Using a normally open push button, this functional block simulates a
-- normally closed push button.
--
-- @param board.pin The pin the button is connected to.
-- @param out SIGNALs generated when the button is pressed.

PROC plc.LDN (VAL INT board.pin, CHAN LEVEL out!)
  CHAN LEVEL a:
  PAR
    plc.LD (board.pin, a!) -- relies on SP fixed version 
    plc.NOT (a?, out!)
:
--}}}

--{{{ PROC plc.OUT
--* Set digital levels on a pin.
-- Reads LEVEL values (LOW or HIGH) on the input channel, and sets the
-- value of the specified pin accordingly.
-- A renamed version of plumbing "digital.output"
-- @param board.pin The Arduino pin number
-- @param in - required output pin level (LOW or HIGH)

PROC plc.OUT (VAL INT board.pin, CHAN LEVEL in?)
  LEVEL v:
  SEQ
    in ? v
    digital.mode (board.pin, OUTPUT)
    WHILE TRUE
      SEQ
        digital.write (board.pin, v)
        in ? v
:
--}}}

-- INTERNAL RELAY FUNCTIONAL BLOCKS (Implements the "Delta" pattern
-- Also implements a black hole function.

--{{{ PROC plc.IR2
--* Implements a 2 output Internal Relay Function
--  Any level message received in the in CHAN is relayed onto the
-- out 1 and out 2 CHANs
--
-- @param board.pin The pin the button is connected to.
-- @param out SIGNALs generated when the button is pressed.

PROC plc.IR2 (CHAN LEVEL in?, out1!, out2!)
  LEVEL x:
  WHILE TRUE
    SEQ
      in ? x
      PAR
        out1 ! x
        out2 ! x
    
:
--}}}

--{{{ PROC plc.IR3
--* Implements a 3 output Internal Relay Function
--  Any level message received in the in CHAN is relayed onto the
-- out1, out2 and out3 CHANs
--
-- @param board.pin The pin the button is connected to.
-- @param out SIGNALs generated when the button is pressed.

PROC plc.IR3 (CHAN LEVEL in?, out1!, out2!, out3!)
  LEVEL x:
  WHILE TRUE
    SEQ
      in ? x
      PAR
        out1 ! x
        out2 ! x
        out3 ! x
    
:
--}}}

--{{{ PROC plc.IR4
--* Implements a 4 output Internal Relay Function
--  Any level message received in the in CHAN is relayed onto the
-- out 1 - out 4 CHANs
--
-- @param board.pin The pin the button is connected to.
-- @param out SIGNALs generated when the button is pressed.

PROC plc.IR4 (CHAN LEVEL in?, out1!, out2!, out3!, out4!)
  LEVEL x:
  WHILE TRUE
    SEQ
      in ? x
      PAR
        out1 ! x
        out2 ! x
        out3 ! x
        out4 ! x    
:
--}}}

--{{{ PROC plc.BH
--* Implements a Black Hole pattern
--
-- @param in Any LEVEL received on this channel is disappeared

PROC plc.BH (CHAN LEVEL in?)
  LEVEL x:
  WHILE TRUE
    in ? x   
:
--}}}

#ENDIF